const inspect = require("util").inspect;
const { AppProvider } = require("../../../lib/context/app");
const { renderToString } = require("react-dom/server");
const { CONSTANTS } = require("../../../lib/helpers");
const path = require('path');
import React from 'react';
import { getComponentsByRoute } from '../../../lib/componee';
import Html from '../../../lib/components/html';

module.exports = async function (request, response, stack, next) {
    let promises = [];
    for (let id in stack) {
        // Check if middleware is async
        if (Promise.resolve(stack[id]) === stack[id])
            promises.push(stack[id]);
    }
    try {
        // Wait for all async middleware to be completed
        await Promise.all(promises);
        let route = request._route;
        // Check if this is a redirection or not.
        if (response.$redirectUrl) {
            response.redirect(response.statusCode || 302, response.$redirectUrl)
        }
        // Check if the response is Json or not.
        else if (response.get('Content-Type') === "application/json; charset=utf-8") {
            response.json(response.$body || {});
        } else {
            // Check if `$body` is empty or not. If yes, we consider the content is already generated by previous middlewares
            if (response.$body && response.$body !== "") {
                response.send(response.$body);
            } else {
                let components = JSON.parse(JSON.stringify(getComponentsByRoute(route.id)));
                for (let area in components) {
                    for (let id in components[area]) {
                        components[area][id]["component"] = require(`${components[area][id]["source"]}`);
                        delete components[area][id]["source"];
                    }
                }
                response.context.components = components;
                //resetServerContext();
                let source = renderToString(<AppProvider value={response.context}><Html /></AppProvider>);
                delete response.context.components;
                source = source.replace("</head>", "<script>var appContext = " + inspect(response.context, { depth: 10, maxArrayLength: null }) + "</script></head>");
                response.send(`<!DOCTYPE html><html id="root">${source}</html>`);
            }
        }
    } catch (error) {
        next(error);
    }
}