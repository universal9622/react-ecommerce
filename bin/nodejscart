#!/usr/bin/env node

const yargs = require('yargs/yargs')
const { hideBin } = require('yargs/helpers');
const argv = yargs(hideBin(process.argv)).argv;
const { readdirSync, existsSync, rmdirSync, writeFileSync, mkdirSync } = require('fs');
const path = require("path");
const resolve = path.resolve;
const express = require("express");
const router = require("../lib/routie");
const { getModuleMiddlewares, get } = require('../lib/middee');
const http = require('http');
const { addComponents, getComponentsByRoute } = require('../lib/componee');
const debug = require('debug')('express:server');
const webpack = require("webpack");
const SpeedMeasurePlugin = require('speed-measure-webpack-plugin');
const { FileListPlugin } = require('../lib/webpack/FileListPlugin');
const { CONSTANTS } = require('../lib/helpers');
const { inspect } = require('util');
require('@babel/register')({
    presets: ['@babel/preset-react'],
    ignore: ['node_modules']
});


/* Loading modules and initilize routes, components and services */
const modules = readdirSync(path.resolve(__dirname, "../modules/"), { withFileTypes: true })
    .filter(dirent => dirent.isDirectory())
    .map(dirent => dirent.name);

modules.forEach(element => {
    try {
        getModuleMiddlewares(path.resolve(__dirname, "../modules", element));
        if (existsSync(resolve(__dirname, "../modules", element, "routes.js")))
            require(resolve(__dirname, "../modules", element, "routes.js"))(router); // routes.js must return a function

        // if (existsSync(resolve(__dirname, "../modules", element, "bootstrap.js")))
        //     require(resolve(__dirname, "../modules", element, "bootstrap.js"))(eventer); // bootstrap.js must return a function
    } catch (e) {
        throw e;
        process.exit(0);
    }
});

modules.forEach(element => {
    try {
        if (existsSync(resolve(__dirname, "../modules", element, "components/site/components.js"))) {
            let components = require(resolve(__dirname, "../modules", element, "components/site/components.js"));
            if (typeof components === 'object' && components !== null) {
                addComponents("site", components);
            }
        }
        if (existsSync(resolve(__dirname, "../modules", element, "components/admin/components.js"))) {
            let components = require(resolve(__dirname, "../modules", element, "components/admin/components.js"));
            if (typeof components === 'object' && components !== null) {
                addComponents("admin", components);
            }
        }

        // if (existsSync(resolve(__dirname, "../modules", element, "bootstrap.js")))
        //     require(resolve(__dirname, "../modules", element, "bootstrap.js"))(eventer); // bootstrap.js must return a function
    } catch (e) {
        throw e;
        process.exit(0);
    }
});

// TODO: load plugins (extensions), themes

/* Create an express application */
let app = express();

// Setup event listener
//let listeners = eventer.getListeners();

//listeners.forEach(l => app.once(l.event, l.callback));

let routes = router.getRoutes();
let siteRoutes = router.getSiteRoutes();
let adminRoutes = router.getAdminRoutes();
routes.forEach(r => {
    app.all(r.path, (request, response, next) => {
        request._route = r;
        next();
    });

    /** 405 Not Allowed handle */
    app.all(r.path, (request, response, next) => {
        if (request._route && !request._route.method.includes(request.method)) {
            response.status(405).send("Method Not Allowed");
        } else {
            next();
        }
    });
})
/** 404 Not Found handle */
// TODO: This has to be enhanced, to support some cases like user visit the valid product route, but the product is either removed or disabled
app.all('*', (request, response, next) => {
    if (!request._route) {
        response.status(404).send("Not Found");
    } else {
        next();
    }
});

let middlewares = get();
middlewares.forEach(m => {
    if (m.routeId === null)
        app.use(m.middleware);
    else if (m.routeId === "admin") {
        adminRoutes.forEach(route => {
            if ((route.id !== "adminStaticAsset") || m.id === "isAdmin") {
                app.all(route.path, m.middleware);
            }
        })
    } else if (m.routeId === "site") {
        siteRoutes.forEach(route => {
            if (route.id !== "staticAsset") {
                app.all(route.path, m.middleware);
            }
        })
    } else {
        let route = routes.find(r => r.id === m.routeId);
        if (route !== undefined) {
            route.method.forEach(method => {
                switch (method.toUpperCase()) {
                    case "GET":
                        app.get(route.path, m.middleware);
                        break;
                    case "POST":
                        app.post(route.path, m.middleware);
                        break;
                    case "PUT":
                        app.put(route.path, m.middleware);
                        break;
                    case "DELETE":
                        app.delete(route.path, m.middleware);
                        break;
                    default:
                        app.get(route.path, m.middleware);
                        break;
                }
            });
        }
    }
});

let command = argv._[0];
if (command === "build") {
    process.env.NODE_ENV = 'production';
    // START BUILD Webpack

    // Collect all "GET" only route
    let getRoutes = routes.filter(r => (r.method.length === 1 && r.method[0].toUpperCase() === "GET"));
    let entry = {};
    getRoutes.forEach(route => {
        let components = getComponentsByRoute(route.id);
        //console.log(components);

        if (!components)
            return;
        for (let area in components) {
            for (let id in components[area]) {
                components[area][id]["component"] = `---require("${components[area][id]["source"]}")---`;
                delete components[area][id]["source"];
            }
        }
        let _p = route.isAdmin == true ? "./admin/" + route.id : "./site/" + route.id;
        rmdirSync(path.resolve(CONSTANTS.CACHEPATH, _p), { recursive: true });
        let content = `var components = module.exports = exports = ${inspect(components, { depth: 5 }).replace(/'---/g, "").replace(/---'/g, "")}`;
        content += "\r\n";
        content += "if (typeof window !== 'undefined')";
        content += "\r\n";
        content += " window.appContext.components = components;";
        mkdirSync(path.resolve(CONSTANTS.ROOTPATH, "./.nodejscart/", _p), { recursive: true });
        writeFileSync(path.resolve(CONSTANTS.ROOTPATH, ".nodejscart/", _p, "components.js"), content);
        let name = route.isAdmin === true ? `admin/${route.id}/bundle` : `site/${route.id}/bundle`;
        entry[name] = [
            path.resolve(CONSTANTS.ROOTPATH, "./.nodejscart/", _p, "components.js"),
            path.resolve(CONSTANTS.LIBPATH, "components", "hydrate.js")
        ]
    });
    const smp = new SpeedMeasurePlugin();
    const compiler = webpack(smp.wrap({
        mode: "production", // "production" | "development" | "none"
        module: {
            rules: [
                {
                    test: /\.jsx?$/,
                    exclude: /(node_modules|bower_components)/,
                    use: {
                        loader: "babel-loader",
                        options: {
                            sourceType: "unambiguous",
                            cacheDirectory: true,
                            presets: [
                                "@babel/preset-env",
                                "@babel/preset-react"
                            ],
                            plugins: [
                                "@babel/plugin-transform-runtime",
                            ]
                        }
                    }
                }
            ]
        },
        // name: 'main',
        target: "web",
        plugins: [
            //new FileListPlugin()
        ],

        entry: entry,
        output: {
            path: path.resolve(CONSTANTS.ROOTPATH, "./.nodejscart/"),
            filename: "[name].js",
        }
    }));


    // compiler.hooks.beforeRun.tap('MyPlugin', (compilation) => {
    //     // return true to emit the output, otherwise false
    //     console.log('aaaa')
    //     console.log(compilation.getStats());

    //     // var end = new Date() - start;
    //     // console.log("Call to doSomething took " + (end) + " milliseconds.")

    //     // return false;
    // });
    // compiler.hooks.buildModule.tap(
    //     'SourceMapDevToolModuleOptionsPlugin',
    //     (module) => {
    //         console.log(module);
    //     }
    // );
    compiler.run((err, stats) => {
        if (err || stats.hasErrors()) {
            //console.log(err);
            //console.log(stats);
        } else {
            //console.log(stats);
        }
        process.exit(0)
    });


} else if (command === "dev") {
    process.env.NODE_ENV = 'development';
} else if (command === "start") {
    process.env.NODE_ENV = 'production';
} else {
    console.log("Invalid command");
    process.exit(0);
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}