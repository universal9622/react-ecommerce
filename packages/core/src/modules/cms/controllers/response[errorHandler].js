/* eslint-disable global-require */
/* eslint-disable guard-for-in */
/* eslint-disable import/no-import-module-exports */
import React from 'react';
import { getComponentsByRoute } from '../../../lib/componee/getComponentByRoute';
import Html from '../../../lib/components/Html';
import { Alert } from '../../../lib/components/modal/Alert';

const { inspect } = require('util');
const { renderToString } = require('react-dom/server');
const { AppProvider } = require('../../../lib/context/app');

module.exports = async (request, response, stack, next) => {
  const promises = [];
  Object.keys(stack).forEach((id) => {
    // Check if middleware is async
    if (stack[id] instanceof Promise) {
      promises.push(stack[id]);
    }
  });

  try {
    // Wait for all async middleware to be completed
    await Promise.all(promises);

    const route = request.currentRoute;
    const routeId = response.statusCode === 404 ? 'notFound' : route.id;
    // Check if this is a redirection or not.
    if (response.$redirectUrl) {
      response.redirect(response.statusCode || 302, response.$redirectUrl);
    } else if (response.get('Content-Type') === 'application/json; charset=utf-8') { // Check if the response is Json or not.
      response.json(response.$body || {});
    } else {
      // eslint-disable-next-line max-len
      // Check if `$body` is empty or not. If yes, we consider the content is already generated by previous middlewares
      // eslint-disable-next-line no-lonely-if
      if (response.$body && response.$body !== '') {
        response.send(response.$body);
      } else {
        const components = JSON.parse(JSON.stringify(getComponentsByRoute(routeId)));
        // eslint-disable-next-line no-restricted-syntax
        for (const area in components) {
          // eslint-disable-next-line no-restricted-syntax
          for (const id in components[area]) {
            components[area][id].component = require(`${components[area][id].source}`);
            delete components[area][id].source;
          }
        }
        response.context.components = components;
        // resetServerContext();
        // eslint-disable-next-line max-len
        let source = renderToString(<AppProvider value={response.context}><Alert><Html /></Alert></AppProvider>);
        delete response.context.components;
        source = source.replace('</head>', `<script>var appContext = ${inspect(response.context, { depth: 10, maxArrayLength: null })}</script></head>`);
        response.send(`<!DOCTYPE html><html id="root">${source}</html>`);
      }
    }
  } catch (error) {
    next(error);
  }
};
